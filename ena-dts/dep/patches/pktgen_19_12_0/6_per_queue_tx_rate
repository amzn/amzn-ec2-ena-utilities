Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: MIT-0

diff --git a/app/pktgen-main.c b/app/pktgen-main.c
index 9d52459..7066605 100644
--- a/app/pktgen-main.c
+++ b/app/pktgen-main.c
@@ -130,6 +130,19 @@ pktgen_usage(const char *prgname)
 		prgname);
 }
 
+/* Return loop interval necessary to achieve expected Mbps rate */
+static void rates2intervals(port_info_t *info)
+{
+	uint64_t pkt_sz_bits, burst_sz_bits, bps;
+
+	pkt_sz_bits = 8ULL * pktgen_wire_size(info);
+	burst_sz_bits = info->tx_burst * pkt_sz_bits;
+
+	for(int i=0; i<RTE_MAX_LCORE; i++) {
+		bps = info->tx_rates[i] * Million;
+		info->tx_interval[i] = burst_sz_bits * pktgen.hz / bps;
+	}
+}
 /**************************************************************************//**
  *
  * pktgen_parse_args - Main parsing routine for the command line.
@@ -154,6 +167,7 @@ pktgen_parse_args(int argc, char **argv)
 		{"no-crc-strip", 0, 0, 0},
 		{NULL, 0, 0, 0}
 	};
+	uint8_t q_provided = 0;
 
 	argvopt = argv;
 
@@ -174,9 +188,14 @@ pktgen_parse_args(int argc, char **argv)
 	pktgen.mbuf_buf_size = RTE_MBUF_DEFAULT_BUF_SIZE;
 
 	pktgen.verbose = 0;
-	while ((opt = getopt_long(argc, argvopt, "p:m:f:l:s:g:hPNGTvj",
+	while ((opt = getopt_long(argc, argvopt, "q:p:m:f:l:s:g:hPNGTvj",
 				  lgopts, &option_index)) != EOF)
 		switch (opt) {
+		case 'q':
+			if (!pg_parse_and_set_tx_rates(pktgen.info[0].tx_rates, optarg)) {
+				q_provided = 1;
+			}
+			break;
 		case 'j':
 			pktgen.enable_jumbo = 1;
 			pktgen.eth_mtu = PG_JUMBO_ETHER_MTU;
@@ -290,6 +309,11 @@ pktgen_parse_args(int argc, char **argv)
 			return -1;
 		}
 
+	if (!q_provided) {
+		printf("The '-q' paramter not provided or with wrong arguments\n");
+		return -1;
+	}
+
 	/* Setup the program name */
 	if (optind >= 0)
 		argv[optind - 1] = prgname;
@@ -476,6 +500,9 @@ main(int argc, char **argv)
 		pktgen_log_info("=== Display processing on lcore %d", rte_lcore_id());
 	}
 
+	/* Compute per-queue interval [cycles] based on user-provided rates */
+	rates2intervals(&pktgen.info[0]);
+
 	/* launch per-lcore init on every lcore except master and master + 1 lcores */
 	ret = rte_eal_mp_remote_launch(pktgen_launch_one_lcore, NULL, SKIP_MASTER);
 	if (ret != 0)
diff --git a/app/pktgen-port-cfg.h b/app/pktgen-port-cfg.h
index 55d9662..002fe11 100644
--- a/app/pktgen-port-cfg.h
+++ b/app/pktgen-port-cfg.h
@@ -278,6 +278,8 @@ typedef struct port_info_s {
 	pcap_info_t *pcap;	/**< PCAP information header */
 	pcap_info_t *pcaps[NUM_Q];	/**< Per Tx queue PCAP information headers */
 	uint64_t pcap_cycles;	/**< number of cycles for pcap sending */
+	uint32_t tx_rates[RTE_MAX_LCORE];	/**< Rates parsed from command-line */
+	uint32_t tx_interval[RTE_MAX_LCORE];	/** Computed Tx-burst intervals in cycles */
 
 	int32_t pcap_result;	/**< PCAP result of filter compile */
 	struct bpf_program pcap_program;/**< PCAP filter program structure */
diff --git a/app/pktgen.c b/app/pktgen.c
index 6003719..78170a8 100644
--- a/app/pktgen.c
+++ b/app/pktgen.c
@@ -1244,6 +1244,7 @@ pktgen_main_rxtx_loop(uint8_t lid)
 	port_map_info(lid, infos, qids, &txcnt, &rxcnt, "RX/TX");
 
 	curr_tsc = rte_get_tsc_cycles();
+	infos[0]->tx_cycles = infos[0]->tx_interval[lid];
 	tx_next_cycle = rte_get_tsc_cycles() + infos[0]->tx_cycles;
 	tx_bond_cycle = rte_get_tsc_cycles() + rte_get_timer_hz()/10;
 
@@ -1296,6 +1297,7 @@ pktgen_main_rxtx_loop(uint8_t lid)
 
 		/* Determine when is the next time to send packets */
 		if (curr_tsc >= tx_next_cycle) {
+			infos[0]->tx_cycles = infos[0]->tx_interval[lid];
 			tx_next_cycle = curr_tsc + infos[0]->tx_cycles;
 
 			for (idx = 0; idx < txcnt; idx++)	/* Transmit packets */
@@ -1347,6 +1349,7 @@ pktgen_main_tx_loop(uint8_t lid)
 	port_map_info(lid, infos, qids, &txcnt, NULL, "TX");
 
 	curr_tsc = rte_get_tsc_cycles();
+	infos[0]->tx_cycles = infos[0]->tx_interval[lid];
 	tx_next_cycle = curr_tsc + infos[0]->tx_cycles;
 	tx_bond_cycle = curr_tsc + rte_get_timer_hz()/10;
 
@@ -1388,6 +1391,7 @@ pktgen_main_tx_loop(uint8_t lid)
 
 		/* Determine when is the next time to send packets */
 		if (curr_tsc >= tx_next_cycle) {
+			infos[0]->tx_cycles = infos[0]->tx_interval[lid];
 			tx_next_cycle = curr_tsc + infos[0]->tx_cycles;
 
 			for (idx = 0; idx < txcnt; idx++)	/* Transmit packets */
diff --git a/lib/common/l2p.c b/lib/common/l2p.c
index b3af274..d1ce98d 100644
--- a/lib/common/l2p.c
+++ b/lib/common/l2p.c
@@ -256,6 +256,93 @@ pg_parse_port_list(char *list, ps_t *ps)
 	return 0;
 }
 
+/*
+ * Example arg usage:
+ * -q "3500.1-4:2000; 1,8-12 ,20 ,22:5000; 31: 7000"
+ */
+int
+pg_parse_and_set_tx_rates(uint32_t *tx_interval, char *str)
+{
+	uint32_t default_rate;
+	char buff[512];
+	char *p = NULL;
+	char *rate_groups[RTE_MAX_LCORE] = {NULL};
+	int k;
+
+	pg_strccpy(buff, str, " \r\n\t\"");
+
+	default_rate = strtol(buff, &p, 10);
+	if (default_rate == 0) {
+		printf("'-q': Wrong default rate\n");
+		goto rates_err;
+	}
+
+	/* First, set all intervals to default */
+	for(int i=0; i<RTE_MAX_LCORE; i++)
+		tx_interval[i] = default_rate;
+
+	if (*p == '\0') {
+		printf("'-q': No dot divider. Only default rate used.\n");
+		return 0;
+	}
+	if (*p++ != '.')
+		goto rates_err;
+
+	/* extract subranges of the same rate */
+	k = pg_strparse(p, ";", rate_groups, RTE_MAX_LCORE);
+	if (k<=0)
+		goto rates_err;
+
+	for(int i=0; i<k; i++) {
+		char *sep;
+		char *key_groups[RTE_MAX_LCORE] = {NULL};
+		uint32_t tx_rate;
+		int key_grp_cnt = 0;
+
+		sep = strchr(rate_groups[i], ':');
+		*sep++ = '\0';
+
+		/* parse value */
+		tx_rate = strtol(sep, NULL, 10);
+
+		/* parse keys */
+		key_grp_cnt = pg_strparse(rate_groups[i], ",", key_groups, RTE_MAX_LCORE);
+		for(int key_grp_id=0; key_grp_id < key_grp_cnt; key_grp_id++) {
+			uint8_t key_first, key_last;
+			char *delim = NULL;
+
+			key_first = strtoul(key_groups[key_grp_id], &delim, 10);
+			if (key_first >= RTE_MAX_LCORE) {
+				printf("Key value higher than %u\n", RTE_MAX_LCORE);
+				goto rates_err;
+			}
+
+			/* verify if a single key X or a range X-Y */
+			if (*delim == '\0') {
+				/* Set a single key */
+				tx_interval[key_first] = tx_rate;
+			} else if (*delim == '-') {
+				/* Set a range */
+				key_last = strtoul(delim+1, NULL, 10);
+				if (key_last >= RTE_MAX_LCORE) {
+					printf("Last key value higher than %u\n", RTE_MAX_LCORE);
+					goto rates_err;
+				}
+				for (uint8_t i_key = key_first; i_key<= key_last; i_key++)
+					tx_interval[i_key] = tx_rate;
+			} else {
+				goto rates_err;
+			}
+		}
+	}
+
+	return 0;
+
+rates_err:
+	printf("'-q': Parsing error. Bad arguments.\n");
+	return -1;
+}
+
 /**************************************************************************//**
  *
  * pg_parse_matrix - Parse the command line argument for port configuration
diff --git a/lib/common/l2p.h b/lib/common/l2p.h
index 8eebe59..367b7b6 100644
--- a/lib/common/l2p.h
+++ b/lib/common/l2p.h
@@ -485,6 +485,7 @@ pg_dump_l2p(l2p_t *l2p)
 
 void pg_port_matrix_dump(l2p_t *l2p);
 int pg_parse_matrix(l2p_t *l2p, char *str);
+int pg_parse_and_set_tx_rates(uint32_t *tx_interval, char *str);
 uint32_t pg_parse_portmask(const char *portmask);
 
 #ifdef __cplusplus
diff --git a/lib/utils/link.c b/lib/utils/link.c
index e4f1584..c93e2ce 100644
--- a/lib/utils/link.c
+++ b/lib/utils/link.c
@@ -138,4 +138,4 @@ link_status_check_cancel(void)
 {
 	lsc_cancel = 1;
 }
-#endif
\ No newline at end of file
+#endif
