Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: MIT-0

diff --git a/latency/latency.c b/latency/latency.c
index e5ec4e6..393888f 100755
--- a/latency/latency.c
+++ b/latency/latency.c
@@ -23,7 +23,7 @@
 #define BUF_IDS 100
 
 #define PKT_SIZE_MIN 64
-#define PKT_SIZE_MAX ETHER_MAX_JUMBO_FRAME_LEN
+#define PKT_SIZE_MAX RTE_ETHER_MAX_JUMBO_FRAME_LEN
 #define PKT_SIZE_DEFAULT 64
 
 #define ITERATIONS_MIN 1
@@ -43,7 +43,7 @@
 #define RING_SIZE 1024
 #endif
 
-static struct ether_addr source_mac, destination_mac;
+static struct rte_ether_addr source_mac, destination_mac;
 static uint32_t source_ip, destination_ip;
 static uint32_t pkt_size = PKT_SIZE_DEFAULT;
 static uint32_t iterations = ITERATIONS_DEFAULT;
@@ -52,7 +52,7 @@ static uint16_t q = 0;
 
 static const struct rte_eth_conf port_conf_default = {
 	.rxmode = {
-		.max_rx_pkt_len = ETHER_MAX_JUMBO_FRAME_LEN,
+		.max_rx_pkt_len = RTE_ETHER_MAX_JUMBO_FRAME_LEN,
 #if RTE_VERSION < RTE_VERSION_NUM(18, 8, 0, 0)
 		.jumbo_frame = 1,
 		.ignore_offload_bitfield = 1,
@@ -143,9 +143,9 @@ static struct rte_mbuf*
 create_mbuf(struct rte_mempool *mp, uint16_t size, uint16_t pkt_id)
 {
 	struct rte_mbuf* m;
-	struct ether_hdr *eth_h;
-	struct ipv4_hdr *ip_h;
-	struct icmp_hdr *icmp_h;
+	struct rte_ether_hdr *eth_h;
+	struct rte_ipv4_hdr *ip_h;
+	struct rte_icmp_hdr *icmp_h;
 	uint8_t *data;
 	uint16_t ip_len, data_len, cs;
 
@@ -157,16 +157,16 @@ create_mbuf(struct rte_mempool *mp, uint16_t size, uint16_t pkt_id)
 	rte_prefetch0(rte_pktmbuf_mtod(m, void *));
 
 	/* Create Ethernet header */
-	eth_h = (struct ether_hdr *)rte_pktmbuf_append(m, ETHER_HDR_LEN);
-	eth_h->ether_type = rte_cpu_to_be_16(ETHER_TYPE_IPv4);
-	ether_addr_copy(&source_mac, &eth_h->s_addr);
-	ether_addr_copy(&destination_mac, &eth_h->d_addr);
+	eth_h = (struct rte_ether_hdr *)rte_pktmbuf_append(m, RTE_ETHER_HDR_LEN);
+	eth_h->ether_type = rte_cpu_to_be_16(RTE_ETHER_TYPE_IPV4);
+	rte_ether_addr_copy(&source_mac, &eth_h->s_addr);
+	rte_ether_addr_copy(&destination_mac, &eth_h->d_addr);
 
 	/* Create IPv4 header */
-	ip_h = (struct ipv4_hdr *)rte_pktmbuf_append(m, sizeof(struct ipv4_hdr));
+	ip_h = (struct rte_ipv4_hdr *)rte_pktmbuf_append(m, sizeof(struct rte_ipv4_hdr));
 	ip_h->version_ihl = BP_IP_VER_IHL;
 	ip_h->type_of_service = 0;
-	ip_len = size - ETHER_HDR_LEN - ETHER_CRC_LEN;
+	ip_len = size - RTE_ETHER_HDR_LEN - RTE_ETHER_CRC_LEN;
 	ip_h->total_length = rte_cpu_to_be_16(ip_len);
 	ip_h->fragment_offset = 0;
 	ip_h->time_to_live = BP_IP_TTL;
@@ -177,18 +177,18 @@ create_mbuf(struct rte_mempool *mp, uint16_t size, uint16_t pkt_id)
 	ip_h->hdr_checksum = rte_ipv4_cksum(ip_h);
 
 	/* Create ICMP header */
-	icmp_h = (struct icmp_hdr *)rte_pktmbuf_append(m, sizeof(struct icmp_hdr));
-	icmp_h->icmp_type = IP_ICMP_ECHO_REQUEST;
+	icmp_h = (struct rte_icmp_hdr *)rte_pktmbuf_append(m, sizeof(struct rte_icmp_hdr));
+	icmp_h->icmp_type = RTE_IP_ICMP_ECHO_REQUEST;
 	icmp_h->icmp_ident = pkt_id;
 	icmp_h->icmp_code = 0;
 	icmp_h->icmp_cksum = 0;
 
 	/* Data */
-	data_len = ip_len - sizeof(struct ipv4_hdr) - sizeof(struct icmp_hdr);
+	data_len = ip_len - sizeof(struct rte_ipv4_hdr) - sizeof(struct rte_icmp_hdr);
 	data = (uint8_t *)rte_pktmbuf_append(m, data_len);
 	memset(data, 0, data_len);
 
-	cs = rte_raw_cksum(icmp_h, ip_len - sizeof(struct ipv4_hdr));
+	cs = rte_raw_cksum(icmp_h, ip_len - sizeof(struct rte_ipv4_hdr));
 	cs = (cs == 0xffff) ? cs : (uint16_t)~cs;
 	icmp_h->icmp_cksum = cs;
 
@@ -203,19 +203,19 @@ create_mbuf(struct rte_mempool *mp, uint16_t size, uint16_t pkt_id)
 static inline int8_t
 validate(struct rte_mbuf *mbuf[], uint16_t n, uint16_t pkt_id)
 {
-	struct ether_hdr *eth;
-	struct icmp_hdr *icmp;
+	struct rte_ether_hdr *eth;
+	struct rte_icmp_hdr *icmp;
 	uint16_t i;
 	int8_t ret = -1;
 
 	for (i = 0; i < n; i++) {
-		eth = rte_pktmbuf_mtod(mbuf[i], struct ether_hdr*);
-		if (!is_same_ether_addr(&eth->s_addr, &destination_mac)) {
+		eth = rte_pktmbuf_mtod(mbuf[i], struct rte_ether_hdr*);
+		if (!rte_is_same_ether_addr(&eth->s_addr, &destination_mac)) {
 			continue;
 		}
 
-		icmp = rte_pktmbuf_mtod_offset(mbuf[i], struct icmp_hdr*,
-			(sizeof(struct ether_hdr) + sizeof(struct ipv4_hdr)));
+		icmp = rte_pktmbuf_mtod_offset(mbuf[i], struct rte_icmp_hdr*,
+			(sizeof(struct rte_ether_hdr) + sizeof(struct rte_ipv4_hdr)));
 		if (icmp->icmp_ident != pkt_id) {
 			continue;
 		}
@@ -368,12 +368,12 @@ parse_ip(const char *q_arg, uint32_t *ip)
 	if (rc != 4)
 		return -1;
 
-	*ip = IPv4(t_ip[0], t_ip[1], t_ip[2], t_ip[3]);
+	*ip = RTE_IPV4(t_ip[0], t_ip[1], t_ip[2], t_ip[3]);
 	return 0;
 }
 
 static int
-parse_mac(const char *q_arg, struct ether_addr *mac)
+parse_mac(const char *q_arg, struct rte_ether_addr *mac)
 {
 	int rc;
 
@@ -510,7 +510,7 @@ main(int argc, char *argv[])
 
 	/* Creates a new mempool in memory to hold the mbufs. */
 	mbuf_pool = rte_pktmbuf_pool_create("MBUF_POOL", NUM_MBUFS * nb_ports,
-		MBUF_CACHE_SIZE, 0, ETHER_MAX_JUMBO_FRAME_LEN, rte_socket_id());
+		MBUF_CACHE_SIZE, 0, RTE_ETHER_MAX_JUMBO_FRAME_LEN, rte_socket_id());
 
 	if (mbuf_pool == NULL)
 		rte_exit(EXIT_FAILURE, "Cannot create mbuf pool\n");
