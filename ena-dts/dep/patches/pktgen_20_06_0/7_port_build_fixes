Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: MIT-0

diff --git a/app/meson.build b/app/meson.build
index 5d52e9d..0668b9c 100644
--- a/app/meson.build
+++ b/app/meson.build
@@ -22,21 +22,12 @@ lua_dir = '../lib/'
 lua_inc = include_directories(join_paths(lua_dir, 'lua'))
 lua = declare_dependency(include_directories: lua_inc, link_args: ['-L' + lua_dir, '-llua5.3'])
 
-cflags = machine_args
-if cc.has_argument('-Wno-format-truncation')
-	cflags += '-Wno-format-truncation'
-endif
-if get_option('enable_lua')
-    cflags += '-DLUA_ENABLED'
-endif
-
-cflags += '-DALLOW_EXPERIMENTAL_API'
-
 # set the major version, which might be used by drivers and libraries
 # depending on the configuration options
 pver = meson.project_version().split('.')
 major_version = '@0@.@1@'.format(pver.get(0), pver.get(1))
 
+cflags = []
 cflags += '-D__YEAR=' + pver.get(0)
 cflags += '-D__MONTH=' + pver.get(1)
 if pver.get(2).contains('-rc')
@@ -77,6 +68,6 @@ deps += [cc.find_library('m', required: false)]
 
 pktgen = executable('pktgen',
 		sources,
-		c_args: [cflags, '-pthread'],
+		c_args: cflags,
 		install: true,
 		dependencies: deps)
diff --git a/lib/meson.build b/lib/meson.build
index 82d28b4..68369f3 100644
--- a/lib/meson.build
+++ b/lib/meson.build
@@ -3,27 +3,15 @@
 
 libraries = ['common', 'utils', 'vec', 'plugin', 'cli', 'lua']
 
-default_cflags = machine_args
-if cc.has_argument('-Wno-format-truncation')
-	default_cflags += '-Wno-format-truncation'
-endif
-if get_option('enable_lua')
-    default_cflags += '-DLUA_ENABLED'
-endif
-
-# Set default cflags
-default_cflags += '-D_GNU_SOURCE'
-
 enabled_libs = []
 foreach l:libraries
 	build = true
 	name = l
-	version = 1
 	allow_experimental_apis = false
 	sources = []
 	headers = []
 	includes = []
-	cflags = default_cflags
+	cflags = []
 	objs = [] # other object files to link against, used e.g. for
 	          # instruction-set optimized versions of code
 
@@ -51,7 +39,6 @@ foreach l:libraries
 			static_dep = shared_dep
 		else
 			message('    Sources in '+ libname)
-			shared_deps = ext_deps
 			static_deps = ext_deps
 			foreach d:deps
 				if not is_variable('static_pktgen_' + d)
@@ -60,7 +47,6 @@ foreach l:libraries
 				else
 					message('    === Found dependency ' + d)
 				endif
-				shared_deps += [get_variable('shared_pktgen_' + d)]
 				static_deps += [get_variable('static_pktgen_' + d)]
 			endforeach
 
@@ -68,9 +54,6 @@ foreach l:libraries
 				cflags += '-DALLOW_EXPERIMENTAL_API'
 			endif
 
-			lib_version = major_version
-			so_version = major_version
-
 			# first build static lib
 			static_lib = static_library(libname,
 					sources,
@@ -83,27 +66,9 @@ foreach l:libraries
 					include_directories: includes,
 					dependencies: static_deps)
 
-			# then use pre-build objects to build shared lib
-			sources = []
-			objs += static_lib.extract_all_objects(recursive: false)
-			shared_lib = shared_library(libname,
-					sources,
-					objects: objs,
-					c_args: cflags,
-					dependencies: shared_deps,
-					include_directories: includes,
-					version: lib_version,
-					soversion: so_version,
-					install: true)
-			shared_dep = declare_dependency(link_with: shared_lib,
-					include_directories: includes,
-					dependencies: shared_deps)
-
-			pktgen_shared_libraries = [shared_lib] + pktgen_shared_libraries
 			pktgen_static_libraries = [static_lib] + pktgen_static_libraries
 		endif # sources.length() > 0
 
-		set_variable('shared_pktgen_' + libname, shared_dep)
 		set_variable('static_pktgen_' + libname, static_dep)
 	endif # if build
 endforeach
diff --git a/meson.build b/meson.build
index 26f8bb4..717a719 100644
--- a/meson.build
+++ b/meson.build
@@ -12,21 +12,21 @@ pktgen_conf = configuration_data()
 # set up some global vars for compiler, platform, configuration, etc.
 cc = meson.get_compiler('c')
 
-dpdk_libraries = []
-dpdk_static_libraries = []
-dpdk_drivers = []
-dpdk_extra_ldflags = []
-dpdk_app_link_libraries = []
-pktgen_shared_libraries = []
 pktgen_static_libraries = []
-machine_args = ['-mavx']
 
 pver = meson.project_version().split('.')
 major_version = '@0@.@1@'.format(pver.get(0), pver.get(1))
 
-add_project_arguments('-include', 'rte_config.h', language: 'c')
+add_project_arguments('-mavx', language: 'c')
 add_project_arguments('-DALLOW_EXPERIMENTAL_API', language: 'c')
 add_project_arguments('-D_GNU_SOURCE', language: 'c')
+if cc.has_argument('-Wno-format-truncation')
+    add_project_arguments('-Wno-format-truncation', language: 'c')
+endif
+if get_option('enable_lua')
+    add_project_arguments('-DLUA_ENABLED', language: 'c')
+endif
+
 
 bsd_dep = dependency('libbsd', required: true)
 
@@ -40,15 +40,6 @@ subdir('app')
 
 subdir('doc')
 
-pkg = import('pkgconfig')
-pkg.generate(name: meson.project_name(),
-        filebase: 'lib' + meson.project_name().to_lower(),
-        version: meson.project_version(),
-        description: 'Pktgen a Data Plane Development Kit (DPDK) application.',
-        subdirs: '.',
-        extra_cflags: ['-include', 'rte_config.h'] + machine_args
-)
-
 # final output, list all the libs and drivers to be built
 # this does not affect any part of the build, for information only.
 output_message = '\n=================\nLibraries Enabled\n=================\n'
